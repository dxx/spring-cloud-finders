description = "Spring Cloud Finders"

ext {
    javaProjects = subprojects - project(":spring-cloud-finders-bom")

    set("springBootVersion", "2.5.8")
    set("springCloudVersion", "2020.0.3")
    set("findersClientVersion", "0.1.4")
    set("reactorVersion", "3.4.13")
}

configure(subprojects) {
    apply plugin: "maven-publish"

    group "io.github.dxx"
    version "0.1.0"

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
        mavenLocal()
    }
}

configure(javaProjects) { project ->
    apply plugin: "java-library"

    java {
        withSourcesJar()
    }

    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        into("META-INF/maven/${project.group}/${project.name}") {
            from { generatePomFileForMavenJavaPublication }
            rename ".*", "pom.xml"
        }
        afterEvaluate {
            manifest {
                attributes "Implementation-Title": archiveBaseName
                attributes "Implementation-Version": archiveVersion
                attributes "Build-Gradle": gradle.gradleVersion
                attributes "Build-Jdk": System.getProperty("java.version")
                attributes "Build-Timestamp": LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    afterEvaluate {
                        name = project.name
                        description = project.description
                    }

                    url = "https://github.com/dxx/spring-cloud-finders"

                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id = "dxx"
                            name = "dxx"
                            email = "dx1898@foxmail.com"
                        }
                    }

                    withXml {
                        def node = asNode()
                        node.dependencies.dependency.findAll { xmlDep ->
                            xmlDep.scope.text() == "runtime" && project.configurations.implementation
                            .allDependencies.find { dep ->
                                xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                            }.each {
                                xmlDep.scope*.value = "compile"
                                xmlDep.appendNode("optional", true)
                            }
                        }
                    }
                }
            }
        }

        repositories {
            mavenLocal()
        }
    }
}
